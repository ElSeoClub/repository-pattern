<?php

namespace DummyNamespace;

use InvalidArgumentException;

class UuidValueObject extends BaseValueObject
{
    private string $value;
    const MIN_LENGTH = 36;
    const MAX_LENGTH = 36;

    public function __construct(string $value)
    {
        parent::__construct($value, self::MIN_LENGTH, self::MAX_LENGTH);
        $this->ensureIsValidUuid($value);
        $this->value = $value;
    }

    public function getValue(): string
    {
        return $this->value;
    }

    private function ensureIsValidUuid(string $value): void
    {
        if (!preg_match('/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i', $value)) {
            throw new InvalidArgumentException('The provided value is not a valid UUID v4: ' . $value);
        }
    }

    public static string generate(): self
    {
        $data = random_bytes(16);

        $data[6] = chr((ord($data[6]) & 0x0f) | 0x40);
        $data[8] = chr((ord($data[8]) & 0x3f) | 0x80);

        return new self(sprintf(
            '%08s-%04s-%04s-%04s-%12s',
            bin2hex(substr($data, 0, 4)),
            bin2hex(substr($data, 4, 2)),
            bin2hex(substr($data, 6, 2)),
            bin2hex(substr($data, 8, 2)),
            bin2hex(substr($data, 10, 6))
        ));
    }


}
